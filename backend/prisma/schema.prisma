// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  universityId String?  @unique
  role        UserRole @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sections     Section[]
  preferences  Preference[]
  assignments  Assignment[]
  feedback     Feedback[]
  notifications Notification[]
  roles        Role[]

  @@map("users")
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  users User[]

  @@map("roles")
}

model Course {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  credits     Int
  levelId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  level       Level      @relation(fields: [levelId], references: [id])
  sections    Section[]
  assignments Assignment[]

  @@map("courses")
}

model Section {
  id        String   @id @default(cuid())
  name      String
  courseId  String
  instructorId String
  roomId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course     Course     @relation(fields: [courseId], references: [id])
  instructor User       @relation(fields: [instructorId], references: [id])
  room       Room?      @relation(fields: [roomId], references: [id])
  meetings   SectionMeeting[]
  assignments Assignment[]

  @@map("sections")
}

model SectionMeeting {
  id        String   @id @default(cuid())
  sectionId String
  dayOfWeek String
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("section_meetings")
}

model Room {
  id        String   @id @default(cuid())
  name      String   @unique
  capacity  Int
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sections Section[]

  @@map("rooms")
}

model TimeSlot {
  id        String   @id @default(cuid())
  dayOfWeek String
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("time_slots")
}

model Schedule {
  id        String   @id @default(cuid())
  name      String
  status    String
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  statusRef ScheduleStatus @relation(fields: [status], references: [name])

  @@map("schedules")
}

model ScheduleStatus {
  name        String     @id
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  schedules Schedule[]

  @@map("schedule_statuses")
}

model Assignment {
  id        String   @id @default(cuid())
  studentId String
  sectionId String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student User    @relation(fields: [studentId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])

  @@unique([studentId, sectionId])
  @@map("assignments")
}

model Preference {
  id        String   @id @default(cuid())
  userId    String
  type      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("preferences")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  content   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("feedback")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Level {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses Course[]

  @@map("levels")
}

enum UserRole {
  STUDENT
  FACULTY
  COMMITTEE
}
