# ============================================
# Docker Compose - SmartSchedule Full Stack
# Orchestrates Frontend, Backend, and Database
# ============================================

services:
  # ===== PostgreSQL Database =====
  database:
    image: postgres:16-alpine
    container_name: smartschedule-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-smartschedule}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smartschedule_secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-smartschedule}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - smartschedule-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smartschedule} -d ${POSTGRES_DB:-smartschedule}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ===== Backend API Service =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: smartschedule-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER:-smartschedule}:${POSTGRES_PASSWORD:-smartschedule_secure_password}@database:5432/${POSTGRES_DB:-smartschedule}?schema=public
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-please}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      # Server configuration
      PORT: 3001
      NODE_ENV: ${NODE_ENV:-production}
      
      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - smartschedule-network
    volumes:
      # Mount for development hot-reload (optional, comment out for production)
      # - ./backend/src:/app/src:ro
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running Prisma migrations...' &&
        npx prisma migrate deploy &&
        echo 'Starting backend server...' &&
        npx tsx src/server.ts
      "

  # ===== Frontend Next.js Service =====
  frontend:
    build:
      context: ./smart-schedule
      dockerfile: Dockerfile
      target: runner
    container_name: smartschedule-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      # Database connection (frontend also needs it for Prisma)
      DATABASE_URL: postgresql://${POSTGRES_USER:-smartschedule}:${POSTGRES_PASSWORD:-smartschedule_secure_password}@database:5432/${POSTGRES_DB:-smartschedule}?schema=public
      
      # Backend API URL (internal Docker network)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:3001}
      
      # External API URL (browser access)
      NEXT_PUBLIC_EXTERNAL_API_URL: ${NEXT_PUBLIC_EXTERNAL_API_URL:-http://localhost:3001}
      
      # Next.js configuration
      NODE_ENV: ${NODE_ENV:-production}
      HOSTNAME: "0.0.0.0"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - smartschedule-network
    volumes:
      # Mount for development (optional, comment out for production)
      # - ./smart-schedule/app:/app/app:ro
      # - ./smart-schedule/components:/app/components:ro
      - frontend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ===== Networks =====
networks:
  smartschedule-network:
    driver: bridge
    name: smartschedule-network

# ===== Volumes =====
volumes:
  postgres_data:
    name: smartschedule-postgres-data
    driver: local
  backend_logs:
    name: smartschedule-backend-logs
    driver: local
  frontend_logs:
    name: smartschedule-frontend-logs
    driver: local
